
;;;;;
;;@type cmd
;;@@parse-relative #f


;;;;;
;;@type Function
;;@name complete-sexp?
;;@description もし、strが完結したＳ式を含んでいれば#tを返します。
;;このユーティリティ手続きは、他の目的にも有用なので、
;;他の手続きといっしょにエクスポートしてあります。
;;
;;この手続きは構文のチェックをするだけで、(不正な文字名を含んだり、
;;登録されていないSRFI-10のタグを含むなど)誤りのある式を判別するわけでは
;;ないことに注意してください。この手続きは入力が'#<'文字の
;;シーケンスを含むと、エラーを発生させます。
;;
;;@param str 

;;;;;
;;@type Method
;;@name listener-show-prompt
;;@description リスナーの出力ポートにプロンプトを表示します。表示にはリスナーの
;;プロンプタ手続きを使います。通常この手続きは最初のプロンプトを
;;印字するために使います。たとえば、クライアントがリスナーソケットに
;;接続してきたときです。
;;
;;@param (listener <listener>) 

;;;;;
;;@type Method
;;@name listener-read-handler
;;@description リスナーのinput-portから読み込んだデータが正しい時に
;;呼ばれるサンクを返します。
;;
;;返されたサンク(readハンドラ)は、以下のように実行されます。
;;この手続きは最初のプロンプトを印字しないことに
;;注意してください。これについては後述のlistener-show-promptを
;;参照してください。
;;input-portにあるデータを読み、これをリスナーの内部バッファに
;;連結する。
;;バッファをスキャンして、それが完結したS式であるかを確かめ、
;;完結していなければ、リターンする。
;;バッファからそのS式を読み込み、そのバッファからは
;;そのデータを除去する。
;;そのS式を評価して、結果をoutput-portへ印字する。
;;output-port.
;;プロンプタ手続きを使って、プロンプトをoutput-portに印字したのち、
;;output-portをフラッシュする。
;;2から繰り返す。
;;
;;@param (listener <listener>) 

;;;;;
;;@type Class
;;@name <listener>
;;@description Replセッションの状態を維持するオブジェクトです。
;;オブジェクトのふるまいをカスタマイズするためにいくつもの外部スロットがあります。
;;これらのスロットの値は、スロットの名前と同名のキーワード引数を用いて
;;オブジェクトの構築時に指定することもできますし、オブジェクト構築後に
;;slot-set!で設定することもできますが、listener-read-handler
;;を呼ぶ前に確定していなければなりません。
;;
;;リスナーが入力を受けとる入力ポートを指定します。デフォルト値は、
;;オブジェクトが構築された時のカレント入力ポートです。
;;
;;リスナーが出力をおこなう出力ポートを指定します。デフォルト値は、
;;オブジェクトが構築された時のカレント出力ポートです。
;;
;;リスナーのエラーメッセージを出力するポートを指定します。デフォルト値は、
;;オブジェクトが構築された時のカレントエラー出力ポートです。
;;
;;引数を取らない手続きです。呼び出し時のカレント入力ポートからScheme式を
;;読み込まなければなりません。デフォルト値はシステムのread手続きです。
;;
;;Scheme式と環境指定子のふたつの引数をとる手続きです。
;;式を与えられた環境で評価し、0個以上の値を返さなければなりません。
;;デフォルト値はシステムのeval手続きです。
;;
;;0以上の引数をとり、カレント出力ポートに印字する手続きです。
;;デフォルト値は、各値をwriteで印字したのち、改行する手続きです。
;;
;;引数をとらない手続きです。カレント出力ポートにプロンプトを
;;印字しなければなりません。リスナーは、この手続きが面倒を見なくてよいように、
;;出力をフラッシュします。
;;デフォルトの手続きは "listener> " を印字します。
;;
;;式を評価する環境指定子です。デフォルト値は(interaction-environment)が
;;返す値です。
;;
;;input-portからEOFが読み込まれたときに呼び出されるサンクです。
;;finalizer実行中は、現在の入力、出力、エラー出力ポートは、
;;listener-read-handlerが呼ばれたときのものに戻っています。
;;
;;このような手続きが必要ない場合は#fにしておいて構いません。
;;デフォルトの値は#fです。
;;
;;エラー例外をひとつ引数としてとる手続きです。read-eval-printの最中に
;;エラーが発生すると、エラーシグナルが発生すのと同じ動的環境で、
;;呼び出されます。
;;デフォルト値はエラー例外をreport-errorを使って印字する手続きです。
;;
;;エラー例外をひとつの引数としてとる手続です。
;;fatalエラー(詳しい定義については後述)が発生したときに呼び出され
;;ます。このハンドラが呼び出された場合、リスナーセッションは安全に続ける
;;ことはできないと思ってください。クライアントへのメッセージを書くこと
;;もできません。このハンドラはこういう状況でログを残したりリスナーの
;;クリーンアップするためのものです。fatal-handlerを実行中は現在の
;;入力、出力、エラー出力はlistener-read-handlerが呼ばれたときのも
;;のに戻ります。
;;
;;fatal-handlerが#fを返す場合、finalizerは後で呼ばれ
;;ます。これを利用してfinalizerで共通のクリーンアップを実行するよ
;;うな実装ができます。fatal-handlerが真の値を返した場合には、
;;finalizerは呼ばれません。
;;
;;
;;

