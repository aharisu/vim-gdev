
;;;;;
;;@type cmd
;;@@parse-relative #f


;;;;;
;;@type Method
;;@name log-format
;;@description ログメッセージをformat手続きでフォーマットし(Output参照)、
;;指定された行き先に書き出します。最初の形式ではデフォルトの行き先が使われます。
;;
;;ファイルはこの手続きが呼ばれるたびにオープンされクローズされます。
;;したがって、ログファイルに書き出すプログラムが走っている最中でも
;;ログファイルをmoveすることができます。
;;また、log-formatはsys-fcntl (Low-level file operations参照)
;;を使ってファイルロックを獲得します。
;;
;;log-openが呼ばれる前にlog-formatが最初の形式で呼ばれた場合、
;;log-formatは何もしません。したがって、log-formatをデバッグに
;;活用し、必要なくなったらlog-openだけをコメントアウトする、というような
;;使用法も可能です。
;;
;;@param (drain <log-drain>) (format <string>) arg ... 

;;;;;
;;@type Method
;;@name log-format
;;@description ログメッセージをformat手続きでフォーマットし(Output参照)、
;;指定された行き先に書き出します。最初の形式ではデフォルトの行き先が使われます。
;;
;;ファイルはこの手続きが呼ばれるたびにオープンされクローズされます。
;;したがって、ログファイルに書き出すプログラムが走っている最中でも
;;ログファイルをmoveすることができます。
;;また、log-formatはsys-fcntl (Low-level file operations参照)
;;を使ってファイルロックを獲得します。
;;
;;log-openが呼ばれる前にlog-formatが最初の形式で呼ばれた場合、
;;log-formatは何もしません。したがって、log-formatをデバッグに
;;活用し、必要なくなったらlog-openだけをコメントアウトする、というような
;;使用法も可能です。
;;
;;@param (format <string>) arg ... 

;;;;;
;;@type Parameter
;;@name log-default-drain
;;@description 引数無しで呼ばれると、log-formatが使う、
;;現在のデフォルトのログの行き先が返されます。
;;まだデフォルトのログの行き先がlog-openで指定されていない場合は
;;#fが返ります。
;;
;;新たな<log-drain>オブジェクトか#fを引数にして呼び出すと、
;;デフォルトのログの行き先がそれに変更されます。
;;parameterize (Parameters) を使えば、一時的にデフォルトの
;;ログの行き先を変更できます。
;;

;;;;;
;;@type Function
;;@name log-open
;;@description デフォルトのログの行き先をpathに指定します。
;;pathは文字列かboolean値あるいはシンボルsyslogで、
;;上のpathスロットで述べたものと
;;おなじ意味を持ちます。またプレフィクスとプログラム名をキーワード引数で
;;指定することもできます。
;;
;;名前に"open"とありますが、この手続きは指定されたファイルをオープンしません。
;;ファイルはlog-formatが呼ばれるたびにオープンされクローズされます。
;;
;;@param path 
;;@param :key 
;;@param prefix 
;;@param program-name 

;;;;;
;;@type Class
;;@name <log-drain>
;;@description ログメッセージの行き先を表現するオブジェクトです。
;;デフォルトのログの行き先として、グローバルな<log-drain>のインスタンスが
;;ひとつ作られます。
;;ログをいくつかにわけて出力する場合などはmakeメソッドを使って
;;いくつでも<log-drain>のインスタンスを作ることができます。
;;
;;
;;
;;
;;
;;
;;@slot path ログファイルのパス名か、#t、#f、あるいはシンボルsyslog
;;の値を取ります。このスロットが#tの場合、ログメッセージは現在のエラーポートに
;;書き出されます。#fの場合はlog-formatは
;;ログを書き出すかわりにフォーマットされたログメッセージを文字列として返します。
;;シンボルsyslogの場合はメッセージがシステムログへと送られます。
;;
;;このスロットの初期値は#fです。
;;
;;@slot prefix 各メッセージの前に追加されるプレフィクス文字列を指定します。
;;メッセージが複数行に渡る場合、プレフィクスは各行の頭に追加されます。
;;またこのスロットには手続きをセットすることもできます。
;;その場合、プレフィクス文字列が必要とされる度にその手続きが<log-drain>
;;を引数として呼び出され、戻り値の文字列がプレフィクスとして使われます。
;;
;;pathスロットの値がシンボルsyslogの場合は、
;;このスロットの値は無視されます。システムのログ機構が適切なプレフィクスを付けるからです。
;;
;;prefixスロットの値が文字列の場合、以下に挙げる文字シーケンスは特別な意味を持ち、
;;log-formatによって置換されます。
;;
;;~T ------
;;  現在の時刻を"Mmm DD hh:mm:ss"という形式で表したもの。
;;  ここで"Mmm" は英語の月名の省略形、"DD" は日、"hh"、"mm"、
;;  "ss" は時間(24時間制)、分、秒です。
;;  このフォーマットはシステムログと同じです。
;;  
;;~Y ------
;;  4桁で表した現在の西暦。
;;  
;;~P ------
;;  プログラム名。初期値は*program-name*の値のbasenameが使われます
;;  (Writing Scheme scripts参照)。
;;  下に述べるprogram-nameスロットの値を変えれば
;;  ここに現れる文字列を変えることができます。
;;  
;;~$ ------
;;  このプログラムのプロセスID。
;;  
;;~U ------
;;  このプロセスの実行ユーザ名。
;;  
;;~H ------
;;  このプロセスが走っているホスト名。
;;
;;このスロットの初期値は"~T ~P[~$]: "です。例えば
;;"this is a log message.\nline 2\nline 3"というメッセージが
;;与えられると、次のようなログが書き出されます。
;;
;;example:
;;  Sep  1 17:30:23 myprogram[441]: this is a log message
;;  Sep  1 17:30:23 myprogram[441]: line 2
;;  Sep  1 17:30:23 myprogram[441]: line 3
;;
;;
;;@slot program-name プレフィクス文字列の~Pが置換されるプログラム名を指定します。
;;
;;@slot lock-policy ログファイルのロックの方法を指定します。
;;このスロットの値がシンボルfcntlだった場合は、
;;fcntl()によるファイルロックが使われます
;;(Low-level file operations参照)。
;;このスロットの値がシンボルfileだった場合は、
;;ログファイルのパス名に ".lock" を追加したロックファイルを作成することによる
;;排他制御が行われます。この場合、ログを行うプロセスはログファイルの
;;置かれるディレクトリに書き込み権限が必要です。
;;また、プロセスがログファイル書き込み中に強制的に終了させられた場合、
;;ロックファイルが残ってしまう恐れがあります。
;;Log-formatはロックファイルが十分に古い場合(現在は10分をリミットとしています)
;;ロックファイルを自動的に削除します。
;;このスロットの値が#fだった場合は、排他制御は行われません。
;;
;;デフォルトの値はfcntlです。但しMacOSXではfcntlスタイルのロックが
;;サポートされていないため、fileがデフォルト値となります。
;;
;;ログの行き先がファイルでない場合は排他制御は行われません。
;;
;;@slot syslog-option @defivarx {<log-drain>} syslog-facility
;;@defivarx {<log-drain>} syslog-priority
;;これらのスロットの値は、ログの行き先がシステムログの場合にのみ使われます。
;;これらの値に関する説明はSyslogを参照して下さい。
;;デフォルトの値はそれぞれLOG_PID、LOG_USER、LOG_INFOです。
;;

