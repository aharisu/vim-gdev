
;;;;;
;;@type cmd
;;@@parse-relative #f


;;;;;
;;@type Macro
;;@name make-option-parser
;;@description これは低レベルのインタフェースです。option-clause は、
;;parse-options と同じです。このマクロは、コマンドラインオプションを
;;後でパースするために使うことができる手続きを返します。
;;
;;返される手続きは、一つの必須の引数と一つのオプション引数を取ります。
;;必須の引数は、与えられたコマンドライン引数としての文字列のリストです。
;;オプションの引数は、三つ以上の引数を取る手続きで、それが与えられると
;;手続きはそれが else オプション節のボディであるかのように使われます。
;;
;;@param (option-clause ...) 

;;;;;
;;@type Macro
;;@name parse-options
;;@description args は、コマンドライン引数のリストを含む式です。
;;このマクロは、コマンドラインオプション(`-' で始まる引数)をスキャンし、
;;option-clause の指定に従って処理し、残りの引数を返します。
;;
;;それぞれの option-clause は、option-spec とそのアクションのペアで
;;構成されます。
;;
;;与えられたコマンドラインオプションが option-spec の一つにマッチすると、
;;関連付けられたアクションが評価されます。アクションは以下のフォームの一つです。
;;
;;bind-spec body ... ------
;;  bind-spec は、ラムダリストのような変数の正しいリストかドット対リストです。
;;  オプションの引数は bind-spec に束縛され、body ... が評価されます。
;;  
;;=> proc ------
;;  コマンドラインオプションが option-spec にマッチすると、
;;  proc がオプションの引数のリストとともに呼び出されます。
;;
;;シンボル else が option-spec の位置にある場合、その節は、
;;与えられたコマンドラインオプションにマッチする他のオプション節が
;;ない場合に選択されます。その節には3つの``引数''が関連付けられます。
;;それらは、マッチしなかったオプション、引数の残り、オプションパーサを
;;表す手続きです。
;;
;;
;;@param args 
;;@param (option-clause ...) 

;;;;;
;;@type Class
;;@name <parseopt-error>
;;@description let-argsが、option-specに従わない引数を見つけた場合は、
;;コンディションタイプ<parseopt-error>のエラーを投げます。
;;例えば、必須のオプション引数が与えられていなかったり、異なる型であった
;;場合などです。
;;
;;example:
;;  (let-args '("-a" "foo") ((a "a=i")) ; option a requires integer
;;    (list a))
;;   ==> parseopt-error
;;
;;このコンディションはあくまでargsに渡された引数をパーズする際に発生するものです。
;;option-specが不正であった場合は通常のエラーが投げられます。
;;

;;;;;
;;@type Macro
;;@name let-args
;;@description このマクロはコマンドライン引数処理の最も典型的なパターンを扱います。
;;引数のリストargsを取り、bind-specで示される仕様をもとに
;;コマンドラインオプションを探してその値を変数に束縛し、それから
;;body ...を実行します。
;;
;;まず簡単な例を見てみましょう。このフォームが何をするか、だいたい想像できるのでは
;;ないかと思います。(より多くの例については下の``Examples''の項を参照して
;;ください)。
;;
;;example:
;;  (define (main args)
;;    (let-args (cdr args)
;;        ((verbose     "v|verbose")
;;         (outfile     "o|outfile=s")
;;         (debug-level "d|debug-level=i" 0)
;;         (help        "h|help" => (cut show-help (car args)))
;;         . restargs
;;        )
;;      ....))
;;  
;;  (define (show-help progname)
;;    ...)
;;
;;ローカル変数verboseは、コマンドラインオプション-vや--verbose
;;が与えられれば#tに、そうでなければ#fに束縛されます。
;;変数outputはオプション引数を取ると指定されており、例えば
;;-o out.txtのようにコマンドラインに指定されれば値"out.txt"が
;;束縛されます。debug-levelも似ていますが、オプション引数は
;;整数へと変換され、またデフォルト値0が指定されています。
;;help節では、単に値を束縛するだけでなくアクションを起動しています。
;;
;;(註: 今のところlet-argsは-vと--vを区別しません。
;;-verboseと--verboseも同様です。将来、getopt_long(3)と
;;互換になるオプションを追加するかもしれません。)
;;
;;最後のドットの後のrestargsは、オプションでないコマンドライン引数のリストを
;;受け取ります。
;;
;;bind-specについて詳しく見てみましょう。
;;bind-specは次のいずれかの形式でなければなりません。
;;
;;example:
;;  1. (var option-spec)
;;  2. (var option-spec default)
;;  3. (var option-spec => callback)
;;  4. (var option-spec default => callback)
;;  
;;  5. (else => handler)
;;  6. (else formals body ...)
;;
;;コマンドライン引数のリストがargsに渡されると、それが
;;option-specに基づいてパーズされます。該当するオプションが見付かれば、
;;変数varが次に述べる値に束縛されます：
;;
;;example:
;;  (a) bind-specの形式が上の1. または2. の場合：
;;    (a1) option-specが引数を要求しない場合は、#t。
;;    (a2) option-specがひとつの引数を要求する場合は、その引数の値。
;;    (a3) option-specがそれ以上の引数を要求する場合は、引数の値のリスト。
;;  (b) bind-specの形式が上の3. または4. の場合、callbackを
;;    引数の値を伴って呼び出し、その戻り値。
;;
;;option-specの詳細については後で説明します。
;;
;;特別な場合として、varを#fとすることもできます。
;;その場合、値は無視されます。
;;callbackでの副作用だけに関心がある場合に使えるでしょう。
;;
;;対応するオプションがargsに与えられなかった場合、
;;varはdefaultが与えられていればその値に、
;;そうでなければ#fに束縛されます。
;;
;;最後のbind-specには5か6の形式も許されます。
;;この節は、どのoption-specにもマッチしないコマンドラインオプションが
;;与えられた場合に選択されます。
;;5番目の形式では、handlerが3つの引数を伴って呼び出されます。
;;引数は、マッチしなかったコマンドラインオプション、
;;残りのコマンドライン引数、そして引数処理に戻るための継続手続きです。
;;handlerは与えられたコマンドラインオプションを処理した後、
;;オプション処理を続けたければ継続手続きに残りのコマンドライン引数を渡し、
;;オプション処理を打ちきりたければ残りのコマンドライン引数を戻り値として
;;返します。返された値は通常の(オプションでない)コマンドライン引数として扱われます。
;;
;;束縛リストは、最後のcdrにシンボルを持つ不完全なリストであっても良く、
;;その場合はコマンドライン引数の残りのリストがその変数にと束縛されます。
;;
;;default、callback、else節のフォーム等は
;;varの束縛の外側のスコープで評価されることに注意して下さい。
;;
;;C における典型的な getopt や getopt_long の実装とは異なり、
;;let-args は与えられたコマンドライン引数の順番を変えません。
;;オプションでない引数(ハイフンで始まらない引数)に遭遇した時点でパースを
;;中止します。
;;
;;パーサは、ハイフン2つのみの引数 `--' に遭遇すると、引数パーシングを
;;中止して`--' の後の引数のリストを返します。
;;
;;
;;全ての束縛が終了した後、body ... が評価されます。
;;bodyは内部defineで始まっていても構いません。
;;
;;@param args 
;;@param (bind-spec ... 
;;@param [. rest]) body ... 

