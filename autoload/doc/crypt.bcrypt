
;;;;;
;;@type cmd
;;@@parse-relative #f


;;;;;
;;@type Function
;;@name bcrypt-gensalt
;;@description 与えられたパラメータを折り込んだ、
;;bcrypt-hashpwのsetting引数に使える文字列を返します。
;;
;;prefix引数はハッシュ関数およびそのバージョンを指定する文字列です。
;;現在のところ、bcrypt互換である$2a$のみがサポートされています。
;;
;;count引数はハッシュの繰り返し回数に関係します。大きな値を指定すれば、
;;ハッシュ値の計算により長い時間がかかります。パスワードハッシュにおいては、
;;時間をかけた方が良いことに注意してください。一回のハッシュの時間が長くなれば
;;辞書攻撃への防御になります。一方で、通常のパスワードチェックでは
;;ログインの度にたかだか一回しはハッシュ関数を呼ばないので、それがたとえコンマ数秒
;;かかったとしてもたいした負荷ではありません。
;;bcryptアルゴリズムでは、(expt 2 count)回ハッシュが繰り返されます。
;;
;;entropy-source引数はランダムなバイト列を格納したu8vectorです。
;;bcryptアルゴリズムでは少なくとも16バイトの長さが必要です。
;;
;;@param &key 
;;@param prefix 
;;@param count 
;;@param entropy-source 

;;;;;
;;@type Function
;;@name bcrypt-hashpw
;;@description passwordのハッシュ値を計算します。settingは
;;ソルト値とパラメータを指定する文字列です。settingが
;;省略された場合は、適切なデフォルトのパラメータとランダムなソルト値が
;;自動的に選択されます。
;;
;;戻り値のハッシュ値文字列にはソルト値とパラメータが含まれているので、
;;それを再びsettingに渡すことができます。したがって、パスワードを
;;既存のハッシュ値に一致するかチェックしたい場合は、ハッシュ値をsettingに渡し、
;;戻ってきた文字列が渡したハッシュ値と一致するかを見れば良いことになります。
;;
;;bcryptアルゴリズムは最大72オクテットまでのパスワードを使えます。
;;
;;新しいハッシュ値を計算する際にパラメータを指定したい場合は、次に説明する
;;bcrypt-gensaltを使うとsettingに使える文字列を得ることができます。
;;
;;@param password 
;;@param :optional 
;;@param setting 

