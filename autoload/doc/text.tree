
;;;;;
;;@type cmd
;;@@parse-relative #f


;;;;;
;;@type Function
;;@name tree->string
;;@description 出力文字列ポートを作成してwrite-treeを呼び、生成された文字列を返します。
;;
;;@param tree 

;;;;;
;;@type Method
;;@name write-tree
;;@description write-treeの既定の動作です。treeがリストなら、その要素それぞれに
;;ついてwrite-treeを呼び出します。それ以外のオブジェクトに関しては
;;displayを呼んで出力します。
;;
;;@param ((tree <top>) 
;;@param out) 

;;;;;
;;@type Method
;;@name write-tree
;;@description write-treeの既定の動作です。treeがリストなら、その要素それぞれに
;;ついてwrite-treeを呼び出します。それ以外のオブジェクトに関しては
;;displayを呼んで出力します。
;;
;;@param ((tree <list>) 
;;@param out) 

;;;;;
;;@type Method
;;@name write-tree
;;@description treeをテキストの木構造とみなして、出力ポートoutに出力します。
;;outが省略された場合は現在の出力ポートが使われます。
;;
;;下に示す2つのメソッドが定義されています。より複雑な動作をさせたい場合は、
;;単純なリストの替わりにノードとなるクラスを定義して、それにメソッドを定義するようにすれば
;;動作をカスタマイズできます。
;;
;;@param tree 
;;@param :optional 
;;@param out 

