
;;;;;
;;@type cmd
;;@@parse-relative #f


;;;;;
;;@type Function
;;@name syntax-rules
;;@description [R5RS]
;;
;;@param literals 
;;@param clause1 
;;@param clause2 
;;@param ... 

;;;;;
;;@type Function
;;@name letrec-syntax
;;@description [R5RS]
;;
;;@param ((name transformer-spec) 
;;@param ...) body 

;;;;;
;;@type Function
;;@name let-syntax
;;@description [R5RS]
;;
;;@param ((name transformer-spec) 
;;@param ...) body 

;;;;;
;;@type Function
;;@name define-syntax
;;@description [R5RS]
;;
;;@param name 
;;@param transformer-spec 

;;;;;
;;@type Function
;;@name define
;;@description [R5RS]
;;この形式はトップレベル (ローカルな束縛が無い状態) とローカルスコープがある状態とで
;;別の意味を持ちます。
;;
;;トップレベルでは、この形式は変数variableに対するグローバルな束縛を定義します。
;;最初の形式では、expressionが評価され、その結果が変数variableの値となります。
;;example:
;;  (define x (+ 1 2))
;;  x ==> 3
;;  (define y (lambda (a) (* a 2)))
;;  (y 8) ==> 16
;;
;;2番目の形式は手続きを定義するための構文的な修飾で、以下の形式と同じです。
;;example:
;;  (define (name . args) body ...)
;;    ≡  (define name (lambda args body ...))
;;
;;このフォームがローカルスコープの中に現われた場合、ローカル変数の束縛となります。
;;
;;beginは新しいスコープを作らないことに注意してください(Sequencing参照)。
;;beginの中に現われるdefineは、あたかもbeginとそれを囲む
;;括弧が無いかのように振舞います。すなわち、以下の2つの形式は等価です。
;;example:
;;  (let ((x 0))
;;    (begin
;;      (define (foo y) (+ x y)))
;;    (foo 3))
;;   ≡ 
;;  (let ((x 0))
;;    (define (foo y) (+ x y))
;;    (foo 3))
;;
;;@param (variable . 
;;@param formals) body ... 

;;;;;
;;@type Function
;;@name define
;;@description [R5RS]
;;この形式はトップレベル (ローカルな束縛が無い状態) とローカルスコープがある状態とで
;;別の意味を持ちます。
;;
;;トップレベルでは、この形式は変数variableに対するグローバルな束縛を定義します。
;;最初の形式では、expressionが評価され、その結果が変数variableの値となります。
;;example:
;;  (define x (+ 1 2))
;;  x ==> 3
;;  (define y (lambda (a) (* a 2)))
;;  (y 8) ==> 16
;;
;;2番目の形式は手続きを定義するための構文的な修飾で、以下の形式と同じです。
;;example:
;;  (define (name . args) body ...)
;;    ≡  (define name (lambda args body ...))
;;
;;このフォームがローカルスコープの中に現われた場合、ローカル変数の束縛となります。
;;
;;beginは新しいスコープを作らないことに注意してください(Sequencing参照)。
;;beginの中に現われるdefineは、あたかもbeginとそれを囲む
;;括弧が無いかのように振舞います。すなわち、以下の2つの形式は等価です。
;;example:
;;  (let ((x 0))
;;    (begin
;;      (define (foo y) (+ x y)))
;;    (foo 3))
;;   ≡ 
;;  (let ((x 0))
;;    (define (foo y) (+ x y))
;;    (foo 3))
;;
;;@param variable 
;;@param expression 

;;;;;
;;@type Function
;;@name unquote-splicing
;;@description [R5RS+][R6RS]
;;これらの構文は準クォートされたtemplate内にあるときにだけ意味を持ち
;;ます。R5RSではこれらの構文が準クォートの外側で現われたときの意味に
;;ついては何も言及していません。Gaucheではそのような場合にはエラーを通知します。
;;そのようなunquoteやunquote-splicingが現れるのは、
;;通常どこかで準クォートを忘れているからです。
;;
;;R5RSはunquoteとunquote-splicingに一つだけ引数を取ることを
;;許しています。(unquote)や(unquote x y)のようなフォームが
;;準クオートの中に現れた場合の動作は定義されていません。
;;R6RSではこれらの場合も定義されており、Gaucheもそれに倣っています。
;;
;;@param datum 
;;@param ... 

;;;;;
;;@type Function
;;@name unquote
;;@description [R5RS+][R6RS]
;;これらの構文は準クォートされたtemplate内にあるときにだけ意味を持ち
;;ます。R5RSではこれらの構文が準クォートの外側で現われたときの意味に
;;ついては何も言及していません。Gaucheではそのような場合にはエラーを通知します。
;;そのようなunquoteやunquote-splicingが現れるのは、
;;通常どこかで準クォートを忘れているからです。
;;
;;R5RSはunquoteとunquote-splicingに一つだけ引数を取ることを
;;許しています。(unquote)や(unquote x y)のようなフォームが
;;準クオートの中に現れた場合の動作は定義されていません。
;;R6RSではこれらの場合も定義されており、Gaucheもそれに倣っています。
;;
;;@param datum 
;;@param ... 

;;;;;
;;@type Function
;;@name quasiquote
;;@description [R5RS]
;;準クォートは固定部分と変数部分の両方を持つような構造を構成するのに便利
;;です。詳細は以下の説明を参照してください。
;;
;;@param template 

;;;;;
;;@type Function
;;@name let
;;@description [R5RS]
;;
;;@param name 
;;@param bindings 
;;@param body 
;;@param ... 

;;;;;
;;@type Function
;;@name do
;;@description [R5RS]
;;
;;@param ((variable init [step]) ...) (test expr ...) body ... 

;;;;;
;;@type Function
;;@name begin
;;@description [R5RS]
;;formを順に評価し、最後の値を返します。
;;
;;Beginはletのような「ブロック」を作成するわけではありません。
;;すなわち、一般的にはform ...の先頭に「内部のdefine (internal define)」を
;;置くことはできません。意味的には、beginはまるでform ...が
;;beginを囲むコンテクスト中に展開されているかのように振舞います。
;;例えば、トップレベルに次のような式があった場合、それは2つのトップレベルのdefineと
;;同等です。
;;
;;example:
;;  (begin (define x 1) (define y 2))
;;
;;よりトリッキーな例:
;;
;;example:
;;  (let ()
;;    (begin 
;;      (define x 2)
;;      (begin
;;        (define y 3)
;;      ))
;;    (+ x y))
;;  
;;    ≡ 
;;  
;;  (let ()
;;    (define x 2)
;;    (define y 3)
;;    (+ x y))
;;
;;@param form 
;;@param ... 

;;;;;
;;@type Function
;;@name letrec
;;@description [R5RS]
;;各変数varがexprの値に束縛されているローカルな環境を作成し、
;;その中でbody ...を評価します。varはシンボルでなければ
;;ならず、重複があってはなりません。body ...の最後の式の値が
;;このフォームの値となります。
;;
;;これらの3つのフォームの違いは、exprが評価される時点のスコープにあります。
;;letはexprをletフォームに入る前の環境において評価します。
;;let*はexprを順に、それ以前のvarが束縛された環境において評価して
;;ゆきます。letrecは全てのvarが仮想的に不定の値に束縛された環境において
;;各exprを評価します。letrecは相互再帰的なローカル関数を定義する場合に
;;必要です。
;;example:
;;  (define x 'top-x)
;;  
;;  (let  ((x 3) (y x)) (cons x y)) ==> (3 . top-x)
;;  (let* ((x 3) (y x)) (cons x y)) ==> (3 . 3)
;;  
;;  (let ((cons (lambda (a b) (+ a b)))
;;        (list (lambda (a b) (cons a (cons b 0)))))
;;    (list 1 2))  ==> (1 2 . 0)
;;  
;;  (letrec ((cons (lambda (a b) (+ a b)))
;;           (list (lambda (a b) (cons a (cons b 0)))))
;;    (list 1 2))  ==> 3
;;
;;@param ((var expr) 
;;@param ...) body ... 

;;;;;
;;@type Function
;;@name let*
;;@description [R5RS]
;;各変数varがexprの値に束縛されているローカルな環境を作成し、
;;その中でbody ...を評価します。varはシンボルでなければ
;;ならず、重複があってはなりません。body ...の最後の式の値が
;;このフォームの値となります。
;;
;;これらの3つのフォームの違いは、exprが評価される時点のスコープにあります。
;;letはexprをletフォームに入る前の環境において評価します。
;;let*はexprを順に、それ以前のvarが束縛された環境において評価して
;;ゆきます。letrecは全てのvarが仮想的に不定の値に束縛された環境において
;;各exprを評価します。letrecは相互再帰的なローカル関数を定義する場合に
;;必要です。
;;example:
;;  (define x 'top-x)
;;  
;;  (let  ((x 3) (y x)) (cons x y)) ==> (3 . top-x)
;;  (let* ((x 3) (y x)) (cons x y)) ==> (3 . 3)
;;  
;;  (let ((cons (lambda (a b) (+ a b)))
;;        (list (lambda (a b) (cons a (cons b 0)))))
;;    (list 1 2))  ==> (1 2 . 0)
;;  
;;  (letrec ((cons (lambda (a b) (+ a b)))
;;           (list (lambda (a b) (cons a (cons b 0)))))
;;    (list 1 2))  ==> 3
;;
;;@param ((var expr) 
;;@param ...) body ... 

;;;;;
;;@type Function
;;@name let
;;@description [R5RS]
;;各変数varがexprの値に束縛されているローカルな環境を作成し、
;;その中でbody ...を評価します。varはシンボルでなければ
;;ならず、重複があってはなりません。body ...の最後の式の値が
;;このフォームの値となります。
;;
;;これらの3つのフォームの違いは、exprが評価される時点のスコープにあります。
;;letはexprをletフォームに入る前の環境において評価します。
;;let*はexprを順に、それ以前のvarが束縛された環境において評価して
;;ゆきます。letrecは全てのvarが仮想的に不定の値に束縛された環境において
;;各exprを評価します。letrecは相互再帰的なローカル関数を定義する場合に
;;必要です。
;;example:
;;  (define x 'top-x)
;;  
;;  (let  ((x 3) (y x)) (cons x y)) ==> (3 . top-x)
;;  (let* ((x 3) (y x)) (cons x y)) ==> (3 . 3)
;;  
;;  (let ((cons (lambda (a b) (+ a b)))
;;        (list (lambda (a b) (cons a (cons b 0)))))
;;    (list 1 2))  ==> (1 2 . 0)
;;  
;;  (letrec ((cons (lambda (a b) (+ a b)))
;;           (list (lambda (a b) (cons a (cons b 0)))))
;;    (list 1 2))  ==> 3
;;
;;@param ((var expr) 
;;@param ...) body ... 

;;;;;
;;@type Function
;;@name or
;;@description [R5RS]
;;test式が順に評価されます。最初に真の値を返したところで評価が止まり、
;;その値が返されます。残りの式は評価されません。
;;もし全ての式が偽の値を返した場合は、偽の値が返されます。
;;式が与えれない場合は#fが返されます。
;;
;;example:
;;  (or (= 2 2) (> 2 1)) ==> #t
;;  (or (= 2 2) (< 2 1)) ==> #t
;;  (or #f #f #f)        ==> #f
;;  (or (memq 'b '(a b c)) 
;;      (/ 3 0)) ==> (b c)
;;
;;@param test 
;;@param ... 

;;;;;
;;@type Function
;;@name and
;;@description [R5RS] 
;;test式が順に評価されます。最初に偽の値を返したところで評価が止まり、
;;偽の値が返されます。残りの式は評価されません。
;;もし全ての式が真の値を返した場合は、最後の式の値が返されます。
;;式が与えれない場合は#tが返されます。
;;
;;example:
;;  (and (= 2 2) (> 2 1)) ==> #t
;;  (and (= 2 2) (< 2 1)) ==> #f
;;  (and 1 2 'c '(f g))   ==> (f g)
;;  (and)                 ==> #t
;;
;;@param test 
;;@param ... 

;;;;;
;;@type Function
;;@name case
;;@description [R5RS][SRFI-87]
;;keyは任意の式です。clauseは以下の形式でなければなりません。
;;example:
;;  ((datum ...) expr expr2 ...)
;;  ((datum ...) => proc)
;;ここで、各datumはSchemeオブジェクトの外部表現であり、全てのdatumは
;;異なっていなければなりません。最後のclauseには次の形式を持つelse節が許されます。
;;example:
;;  (else expr expr2 ...)
;;  (else => proc)
;;
;;まずkeyが評価され、その結果がそれぞれのdatumと比較されます。
;;keyの値とeqv?(Equivalence参照)を使って一致するdatum
;;が見つかれば、対応するexprが順に評価され、その最後の値がcaseの
;;値となります。=>を含む節はSRFI-87で定義されています。これらの節では、
;;keyの結果がprocに渡され、その結果がcaseの値となります。
;;
;;もし一致するdatumが見つからない場合、else節が与えられていれば
;;そのexprが順に評価され、最後の値が返されます。else節がなければcase節
;;の値は未定義です。
;;
;;example:
;;  (case (* 2 3)
;;    ((2 3 5 7) 'prime)
;;    ((1 4 6 8 9) 'composite)) ==> composite
;;  
;;  (case (car '(c d))
;;    ((a) 'a)
;;    ((b) 'b)) ==> undefined
;;  
;;  (case (car '(c d))
;;    ((a e i o u) 'vowel)
;;    ((w y) 'semivowel)
;;    (else 'consonant)) ==> consonant
;;  
;;  (case 6
;;    ((2 4 6 8) => (cut + <> 1))
;;    (else => (cut - <> 1))) ==> 7
;;  
;;  (case 5
;;    ((2 4 6 8) => (cut + <> 1))
;;    (else => (cut - <> 1))) ==> 4
;;
;;@param key 
;;@param clause1 
;;@param clause2 
;;@param ... 

;;;;;
;;@type Function
;;@name cond
;;@description [R5RS][SRFI-61]
;;各clause節は次のいずれかの形式でなければなりません。
;;example:
;;  (test expr ...)
;;  (test => expr)
;;  (test guard => expr)
;;  (else expr expr2 ...)
;;最後の形式は最後の節のみに許されます。
;;
;;最初の節から順にtestが評価され、それが真の値を返すまで次の節のtestが
;;評価されます。testが真の値を返したら、それが最初の形式であれば
;;その節のexprが順に評価され、最後の評価値が戻り値となります。
;;それが2番目の形式であれば、exprがまず評価されます。
;;exprは引数をひとつ取る手続きを返さねばなりません。
;;続いて、testの結果がその手続きに渡され、その手続きの戻り値がcond形式の
;;評価値となります。
;;
;;3番目の形式はSRFI-61で定義されています。この形式では、testは
;;任意の数の値に評価されることができます。それらの値がまず
;;guardに渡され、もしguardが真の値を返したら、同じ引数がexprに
;;適用されて、その戻り値がcond形式の評価値となります。
;;guardが#fを返した場合は次の節へと評価が進みます。
;;guardとexpr
;;は、testが返すのと同数の引数を取れなければいけません。
;;
;;もし全てのテストが偽の値を返し、最後の節が4番目の形式(else節)でなければ、未定義の値が返されます。
;;
;;最後の節がelse節で、他の全てのテストが失敗した場合、else節のexpr
;;が順に評価され、その最後の値がcond形式の値となります。
;;
;;example:
;;  (cond ((> 3 2) 'greater)
;;        ((< 3 2) 'less)) ==> greater
;;  (cond ((> 3 3) 'greater)
;;        ((< 3 3) 'less)
;;        (else 'equal)) ==> equal
;;  (cond ((assv 'b '((a 1) (b 2))) => cadr)
;;        (else #f)) ==> 2
;;
;;@param clause1 
;;@param clause2 
;;@param ... 

;;;;;
;;@type Function
;;@name if
;;@description [R5RS]
;;まずtestを評価し、それが真の値を返したらconsequentを評価します。
;;そうでなければalternativeを評価します。もしalternativeが与えられて
;;いなければ未定義の値を返します。
;;
;;example:
;;  (if (number? 3) 'yes 'no) ==> yes
;;  (if (number? #f) 'yes 'no) ==> no
;;  
;;  (let ((x '(1 . 2)))
;;    (if (pair? x)
;;        (values (car x) (cdr x))
;;        (values #f #f)))
;;    ==> 1 and 2
;;
;;@param test 
;;@param consequent 

;;;;;
;;@type Function
;;@name if
;;@description [R5RS]
;;まずtestを評価し、それが真の値を返したらconsequentを評価します。
;;そうでなければalternativeを評価します。もしalternativeが与えられて
;;いなければ未定義の値を返します。
;;
;;example:
;;  (if (number? 3) 'yes 'no) ==> yes
;;  (if (number? #f) 'yes 'no) ==> no
;;  
;;  (let ((x '(1 . 2)))
;;    (if (pair? x)
;;        (values (car x) (cdr x))
;;        (values #f #f)))
;;    ==> 1 and 2
;;
;;@param test 
;;@param consequent 
;;@param alternative 

;;;;;
;;@type Function
;;@name set!
;;@description [R5RS][SRFI-17]
;;まずexpressionが評価されます。最初の形式では、symbolへの束縛が
;;expressionの結果を指すように変更されます。
;;もしsymbolがローカルに束縛されていない場合は、グローバルな変数symbolが
;;存在していなければなりません。そうでなければエラーが報告されます。
;;
;;2番目の形式はSRFI-17に定義されている「一般化されたset!」です。
;;これは構文的な装飾であり、実際は以下のように解釈されます。
;;example:
;;  ((setter proc) arg ... expression)
;;CommonLispのsetfとは、setter手続きに渡される引数の順序が異なることに注意して下さい。
;;
;;例：
;;
;;example:
;;  (define x 3)
;;  (set! x (list 1 2))  ==> undefined
;;  x                    ==> (1 2)
;;  
;;  (set! (car x) 5)     ==> undefined
;;  x                    ==> (5 2)
;;
;;@param (proc arg 
;;@param ...) expression 

;;;;;
;;@type Function
;;@name set!
;;@description [R5RS][SRFI-17]
;;まずexpressionが評価されます。最初の形式では、symbolへの束縛が
;;expressionの結果を指すように変更されます。
;;もしsymbolがローカルに束縛されていない場合は、グローバルな変数symbolが
;;存在していなければなりません。そうでなければエラーが報告されます。
;;
;;2番目の形式はSRFI-17に定義されている「一般化されたset!」です。
;;これは構文的な装飾であり、実際は以下のように解釈されます。
;;example:
;;  ((setter proc) arg ... expression)
;;CommonLispのsetfとは、setter手続きに渡される引数の順序が異なることに注意して下さい。
;;
;;例：
;;
;;example:
;;  (define x 3)
;;  (set! x (list 1 2))  ==> undefined
;;  x                    ==> (1 2)
;;  
;;  (set! (car x) 5)     ==> undefined
;;  x                    ==> (5 2)
;;
;;@param symbol 
;;@param expression 

;;;;;
;;@type Function
;;@name lambda
;;@description [R5RS+]
;;この式は評価されると手続きを生成します。この式が評価された時点の環境が手続き中に保持されます。
;;手続きが呼ばれると、記憶された環境に引数の束縛を追加した環境中でbody が順に評価され、
;;最後の式の値が返されます。
;;
;;^はlambdaの短い別名です。これはGauche独自の拡張です。
;;
;;example:
;;  (lambda (a b) (+ a b))
;;    ==> 二つの引数を加算する手続き
;;  
;;  ((lambda (a b) (+ a b)) 1 2) ==> 3
;;  
;;  ((^(a b) (+ a b)) 1 2)       ==> 3
;;
;;Gaucheはまた、lambdaが取るformalsの構文を拡張し、
;;省略可能引数やキーワード引数を簡単に指定できるようにしています。
;;同じ機能は純粋なR5RSでも、可変長引数を自力で解析することで実現可能ですが、
;;コードはより長く冗長になってしまいます。ポータブルなコードを書いているのでなければ
;;拡張構文を使った方が良いでしょう。
;;
;;Formals は以下のいずれかの形でなければなりません。
;;  (variable ...) :
;;  手続きは決まった数の引数を取ります。
;;  実引数がそれぞれ対応するvariableに束縛されます。
;;  
;;  example:
;;    ((lambda (a) a) 1)    ==> 1
;;    
;;    ((lambda (a) a) 1 2)  ==> @i{error - wrong number of arguments}
;;  
;;  variable :
;;  手続きは不定個の引数を取ります。
;;  実引数は新しいリストに集められて、そのリストがvaribleに束縛されます。
;;  
;;  example:
;;    ((lambda a a) 1 2 3)  ==> (1 2 3)
;;  
;;  (variable_0 ... variable_N-1 . variable_N) : 
;;  手続きは少なくともN個の引数を取ります。N個までの実引数は対応するvariable
;;  に束縛されます。N個を越えた実引数は新しいリストに集められて
;;  variable_Nに束縛されます。
;;  
;;  example:
;;    ((lambda (a b . c) (print "a="a" b="b" c="c)) 1 2 3 4 5)
;;     ==> prints a=1 b=2 c=(3 4 5)
;;  
;;  (variable ... extended-spec ...) :
;;  拡張引数指定です。ゼロ個以上の必須引数を示す変数のリストの後に、
;;  キーワード:optional、:keyあるいは:restで
;;  始まるextended-specが続きます。
;;  
;;  extended-specは省略可能引数指定、キーワード引数指定、残余引数指定の
;;  任意の組み合わせにより構成されます。
;;  
;;  :optional optspec ... ------
;;    省略可能引数を指定します。各optspecは以下のいずれかの形式です。
;;    
;;    example:
;;      variable
;;      (variable init-expr)
;;    
;;    仮引数variableは、対応する実引数が与えられればその値に、
;;    与えられなければinit-exprを評価した値に束縛されます。
;;    optspecがvariableだけである場合は、
;;    実引数が省略された時の仮引数の値は#<undef>になります
;;    (Undefined values参照)。
;;    
;;    init-exprは対応する実引数が与えられなかった場合にのみ評価されます。
;;    init-exprの評価環境にはこのoptspecに先立つ仮引数が含まれます。
;;    
;;    example:
;;      ((lambda (a b :optional (c (+ a b))) (list a b c))
;;       1 2)    ==> (1 2 3)
;;      
;;      ((lambda (a b :optional (c (+ a b))) (list a b c))
;;       1 2 -1) ==> (1 2 -1)
;;      
;;      ((lambda (a b :optional c) (list a b c))
;;       1 2)    ==> (1 2 #<undef>)
;;      
;;      ((lambda (:optional (a 0) (b (+ a 1))) (list a b))
;;       )       ==> (0 1)
;;    
;;    必須引数と省略可能引数の総数よりも多い実引数が渡された場合、
;;    その手続きが:keyや:rest引数指定を持っていない限りは
;;    エラーが通知されます。
;;    
;;    example:
;;      ((lambda (:optional a b) (list a b)) 1 2 3)
;;       ==> @i{error - too many arguments}
;;      
;;      ((lambda (:optional a b :rest r) (list a b r)) 1 2 3)
;;       ==> (1 2 (3))
;;    
;;  :key keyspec ... [:allow-other-keys [variable]] ------
;;    キーワード引数を指定します。各keyspecは以下の形式のいずれかです。
;;    
;;    example:
;;      variable
;;      (variable init-expr)
;;      ((keyword variable) init-expr)
;;    
;;    仮引数variableは、実引数にvariableと同名のキーワードによる
;;    キーワード引数が与えられればその値に、そうでなければinit-exprを評価
;;    した値に束縛されます。init-exprの無い最初の形式では、実引数が
;;    与えられなければvariableは#<undef>に束縛されます。
;;    
;;    example:
;;      (define f (lambda (a :key (b (+ a 1)) (c (+ b 1)))
;;                  (list a b c)))
;;      
;;      (f 10)            ==> (10 11 12)
;;      (f 10 :b 4)       ==> (10 4 5)
;;      (f 10 :c 8)       ==> (10 11 8)
;;      (f 10 :c 1 :b 3)  ==> (10 3 1)
;;    
;;    三番目の形式では、仮引数の名前とは別に引数を与えるキーワードを指定できます。
;;    
;;    example:
;;      ((lambda (:key ((:aa a) -1)) a) :aa 2)
;;        ==> 2
;;    
;;    デフォルトでは、キーワード引数指定をもつ手続きは、認識できないキーワード引数が
;;    与えられた場合にエラーを通知します。仮引数リストに:allow-other-keysを指定することで、
;;    この動作を抑制することができます。
;;    :allow-other-keysに続いてvariableを与えれば、
;;    認識できなかったキーワード引数のリストがvariableに束縛されます。
;;    
;;    example:
;;      ((lambda (:key a) a)
;;       :a 1 :b 2)  ==> @i{error - unknown keyword :b}
;;      
;;      ((lambda (:key a :allow-other-keys) a)
;;       :a 1 :b 2)  ==> 1
;;      
;;      ((lambda (:key a :allow-other-keys z) (list a z))
;;       :a 1 :b 2)  ==> (1 (:b 2))
;;    
;;    :optional引数指定と同時に使われた場合、キーワード引数はすべての
;;    省略可能引数が束縛された後の実引数リストから探されます。
;;    
;;    example:
;;      ((lambda (:optional a b :key c) (list a b c))
;;       1 2 :c 3)  ==> (1 2 3)
;;      
;;      ((lambda (:optional a b :key c) (list a b c))
;;       :c 3)      ==> (:c 3 #<undef>)
;;      
;;      ((lambda (:optional a b :key c) (list a b c))
;;       1 :c 3)     ==> @i{error - keyword list not even}
;;    
;;    
;;  :rest variable ------
;;    
;;    残余引数を指定します。:optional引数指定が無い場合は、
;;    必須引数の束縛が済んだ後で残っている実引数のリストがvariableに
;;    束縛されます。:optional引数指定がある場合は、
;;    必須引数とすべての省略可能引数の束縛が済んだ後で残っている実引数の
;;    リストがvariableに束縛されます。
;;    
;;    example:
;;      ((lambda (a b :rest z) (list a b z))
;;       1 2 3 4 5)  ==> (1 2 (3 4 5))
;;      
;;      ((lambda (a b :optional c d :rest z) (list a b c d z))
;;       1 2 3 4 5)  ==> (1 2 3 4 (5))
;;      
;;      ((lambda (a b :optional c d :rest z) (list a b c d z))
;;       1 2 3)      ==> (1 2 3 #<undef> ())
;;    
;;    残余引数指定とキーワード引数指定の両方が与えられた場合、
;;    両者はともに、必須引数と省略可能引数が処理された後の実引数リストを処理の対象とします。
;;    
;;    example:
;;      ((lambda (:optional a :rest r :key k) (list a r k))
;;       1 :k 3)  ==> (1 (:k 3) 3)
;;    
;;  
;;  R5RSの仕様範囲内で省略可能引数、キーワード引数を受け取るように
;;  書くこともできます。Optional argument parsingの
;;  let-optionals*、let-keywords、
;;  let-keywords*を参照してください。
;;  
;;
;;
;;@param formals 
;;@param body 
;;@param ... 

;;;;;
;;@type Function
;;@name quote
;;@description [R5RS]
;;datumそれ自身を返します。
;;example:
;;  (quote x) ==> x
;;  (quote (1 2 3)) ==> (1 2 3)
;;
;;@param datum 

;;;;;
;;@type Function
;;@name delay
;;@description [SRFI-45][R5RS]
;;これらの形式はexpressionの評価を遅延するプロミスを生成し
;;ます。Expression はこのプロミスがforceにわたったときに評
;;価されます。
;;
;;expression自身がプロミスを評価するようになっている場合には、
;;lazyを使うべきです。そうでなければ、delayを使うべきです。
;;型で考えればその違いは明白でしょう。
;;
;;example:
;;  lazy  : Promise a -> Promise a
;;  delay : a -> Promise a
;;
;;Schemeでは静的な型付けをしないので、この使い分けを強制することができま
;;せん。文脈にしたがってプログラマが適切に選択する必要があります。一般的
;;にはlazyは遅延アルゴリズムを表現している関数本体全体を囲む場合
;;にのみ出現します。
;;
;;lazyの実用的な使用例についてはutil.stream
;;(Stream library)の実装をチェックするといいでしょう。
;;
;;@param expression 

